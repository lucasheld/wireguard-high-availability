[Interface]
Address = 10.0.0.1/24, fdc9:281f:04d7:9ee9::1/112
ListenPort = 51820
PrivateKey = {{ wireguard.interface.private_key }}

# enable IP forwarding
PreUp = sysctl -w net.ipv4.ip_forward=1
PreUp = sysctl -w net.ipv6.conf.all.forwarding=1

# allow requests to wireguard server
PreUp = iptables -I INPUT -p udp --dport 51820 -j ACCEPT
PreUp = ip6tables -I INPUT -p udp --dport 51820 -j ACCEPT

# create chain
PreUp = iptables -N wg0-filter
PreUp = ip6tables -N wg0-filter6

# redirect traffic from wg0 interface to chain
PreUp = iptables -I INPUT -i wg0 -j wg0-filter
PreUp = iptables -I FORWARD -i wg0 -j wg0-filter
PreUp = iptables -I FORWARD -o wg0 -j wg0-filter
PreUp = iptables -I OUTPUT -o wg0 -j wg0-filter
PreUp = ip6tables -I INPUT -i wg0 -j wg0-filter6
PreUp = ip6tables -I FORWARD -i wg0 -j wg0-filter6
PreUp = ip6tables -I FORWARD -o wg0 -j wg0-filter6
PreUp = ip6tables -I OUTPUT -o wg0 -j wg0-filter6

# allow already opened connections
PreUp = iptables -A wg0-filter -m state --state ESTABLISHED,RELATED -j ACCEPT
PreUp = ip6tables -A wg0-filter6 -m state --state ESTABLISHED,RELATED -j ACCEPT

# allow Uptime Kuma ping from wireguard server to all peers
PreUp = iptables -A wg0-filter -d 10.0.0.0/16 ! -i wg0 -j ACCEPT
PreUp = ip6tables -A wg0-filter6 -d fdc9:281f:4d7:9ee9::0:0/96 ! -i wg0 -j ACCEPT

# allow requests within the same subnet
{% for subnet in subnets %}
{% if subnet.type == 'ipv4' %}
PreUp = iptables -A wg0-filter -s {{ subnet.network }} -d {{ subnet.network }} -j ACCEPT
{% elif subnet.type == 'ipv6' %}
PreUp = ip6tables -A wg0-filter6 -s {{ subnet.network }} -d {{ subnet.network }} -j ACCEPT
{% endif %}
{% endfor %}

# allow requests based on custom rules
{% for rule in wireguard.custom_rules %}
{% if rule.type == 'ipv4' %}
PreUp = iptables -A wg0-filter -s {{ rule.src }} -d {{ rule.dst }} -j ACCEPT
{% elif rule.type == 'ipv6' %}
PreUp = ip6tables -A wg0-filter6 -s {{ rule.src }} -d {{ rule.dst }} -j ACCEPT
{% endif %}
{% endfor %}

# reject everything else
PreUp = iptables -A wg0-filter -j REJECT
PreUp = ip6tables -A wg0-filter6 -j REJECT

# delete allow rule to wireguard server
PostDown = iptables -D INPUT -p udp --dport 51820 -j ACCEPT
PostDown = ip6tables -D INPUT -p udp --dport 51820 -j ACCEPT

# delete traffic redirection rules
PostDown = iptables -D INPUT -i wg0 -j wg0-filter
PostDown = iptables -D FORWARD -i wg0 -j wg0-filter
PostDown = iptables -D FORWARD -o wg0 -j wg0-filter
PostDown = iptables -D OUTPUT -o wg0 -j wg0-filter
PostDown = ip6tables -D INPUT -i wg0 -j wg0-filter6
PostDown = ip6tables -D FORWARD -i wg0 -j wg0-filter6
PostDown = ip6tables -D FORWARD -o wg0 -j wg0-filter6
PostDown = ip6tables -D OUTPUT -o wg0 -j wg0-filter6

# remove rules from chain
PostDown = iptables -F wg0-filter
PostDown = ip6tables -F wg0-filter6

# remove chain
PostDown = iptables -X wg0-filter
PostDown = ip6tables -X wg0-filter6


{% for peer in wireguard.peers %}
[Peer]
PublicKey = {{ peer.public_key }}
AllowedIPs = {{ peer.allowed_ips | join(', ') }}

{% endfor %}
